import streamlit as st
import pandas as pd
from io import BytesIO

st.set_page_config(page_title="Tree Mortality Assessment", layout="wide")

st.title("üå≤ Tree Mortality Assessment Tool")

# 1. –ö–∞—á–≤–∞–Ω–µ –Ω–∞ —Ñ–∞–π–ª
uploaded_file = st.file_uploader("–ö–∞—á–∏ CSV –∏–ª–∏ Excel —Ñ–∞–π–ª", type=["csv", "xlsx"])

# 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ –ø—Ä–∞–≥–æ–≤–µ
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –ø—Ä–∞–≥–æ–≤–µ")
cdi_thr = st.sidebar.slider("CDI –ø—Ä–∞–≥", 0.0, 1.0, 0.50, 0.01)
bdi_thr = st.sidebar.slider("BDI –ø—Ä–∞–≥", 0.0, 1.0, 0.75, 0.01)
rdi_thr = st.sidebar.slider("RDI –ø—Ä–∞–≥", 0.0, 1.0, 0.75, 0.01)
risk_high = st.sidebar.slider("Risk Index ‚Äì –≤–∏—Å–æ–∫", 0.0, 1.0, 0.60, 0.01)
risk_med = st.sidebar.slider("Risk Index ‚Äì —Å—Ä–µ–¥–µ–Ω", 0.0, 1.0, 0.40, 0.01)
moist_thr = st.sidebar.number_input("MoistCrit (%)", 0, 100, 25)

if uploaded_file:
    # 3. –ó–∞—Ä–µ–∂–¥–∞–Ω–µ
    if uploaded_file.name.endswith(".csv"):
        df = pd.read_csv(uploaded_file)
    else:
        df = pd.read_excel(uploaded_file)

    st.subheader("üìã –í—Ö–æ–¥–Ω–∏ –¥–∞–Ω–Ω–∏")
    st.dataframe(df.head())

    # 4. –ò–∑—á–∏—Å–ª–µ–Ω–∏—è
    if {"WM_T1 (%)","WM_T2 (%)","WM_T3 (%)"}.issubset(df.columns):
        df["WM_Min (%)"] = df[["WM_T1 (%)","WM_T2 (%)","WM_T3 (%)"]].min(axis=1)
    else:
        df["WM_Min (%)"] = None

    df["WM_CritFlag"] = df["WM_Min (%)"].apply(
        lambda x: 1 if pd.notna(x) and x != 0 and x <= moist_thr else 0
    )

    if {"CDI","BDI","RDI"}.issubset(df.columns):
        df["Critical_Zones_Count"] = (
            (df["CDI"] >= cdi_thr).astype(int) +
            (df["BDI"] >= bdi_thr).astype(int) +
            (df["RDI"] >= rdi_thr).astype(int)
        )
    else:
        df["Critical_Zones_Count"] = 0

    df["Critical_Total"] = df["Critical_Zones_Count"] + df["WM_CritFlag"]

    # 5. –õ–æ–≥–∏–∫–∞ –∑–∞ Mortality_Probability
    def mortality(row):
        if row.get("Burnt (%)",0) == 100:
            return "‚¨õ –°–∏–≥—É—Ä–Ω–∞ —Å–º—ä—Ä—Ç –¥–æ 6 –º–µ—Å–µ—Ü–∞"
        if row.get("Cambium_Dead_Count",0) >= 3:
            return "‚¨õ –°–∏–≥—É—Ä–Ω–∞ —Å–º—ä—Ä—Ç –¥–æ 6 –º–µ—Å–µ—Ü–∞"
        if row.get("Critical_Total",0) >= 3:
            return "‚¨õ –°–∏–≥—É—Ä–Ω–∞ —Å–º—ä—Ä—Ç –¥–æ 6 –º–µ—Å–µ—Ü–∞"
        if row.get("Critical_Total",0) == 2:
            return "üü• –í–∏—Å–æ–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç –¥–æ 6 –º–µ—Å–µ—Ü–∞"
        if row.get("Critical_Total",0) == 1:
            return "üü• –í–∏—Å–æ–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç –¥–æ 12 –º–µ—Å–µ—Ü–∞"
        if row.get("Risk_Index",0) >= risk_high:
            return "üü• –í–∏—Å–æ–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç –∑–∞ —Å–º—ä—Ä—Ç"
        if row.get("Risk_Index",0) >= risk_med:
            return "üü® –°—Ä–µ–¥–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç"
        return "üü© –ù–∏—Å–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç"

    df["Mortality_Probability"] = df.apply(mortality, axis=1)

    # 6. –ü–æ–∫–∞–∑–≤–∞–Ω–µ
    st.subheader("üìä –û—Ü–µ–Ω–∫–∞ –Ω–∞ –¥—ä—Ä–≤–µ—Ç–∞—Ç–∞")
    st.dataframe(df)

    # 7. –û–±–æ–±—â–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.subheader("üìà –û–±–æ–±—â–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    stats = df["Mortality_Probability"].value_counts()
    st.bar_chart(stats)
    st.write(stats)

    # 8. –ï–∫—Å–ø–æ—Ä—Ç
    st.subheader("üíæ –ï–∫—Å–ø–æ—Ä—Ç –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ")

    # CSV
    csv = df.to_csv(index=False).encode("utf-8")
    st.download_button("‚¨áÔ∏è –ò–∑—Ç–µ–≥–ª–∏ –∫–∞—Ç–æ CSV", data=csv,
                       file_name="Tree_Mortality_Results.csv",
                       mime="text/csv")

    # Excel
    output = BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        df.to_excel(writer, index=False, sheet_name="Results")
    st.download_button("‚¨áÔ∏è –ò–∑—Ç–µ–≥–ª–∏ –∫–∞—Ç–æ Excel", data=output.getvalue(),
                       file_name="Tree_Mortality_Results.xlsx",
                       mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
